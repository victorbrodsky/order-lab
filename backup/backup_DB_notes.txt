The folder is mounted on the postgres machine as the following.
The database backup is scheduled as cronjobs to run on 3am daily and hourly,
all backup files are written to /mnt/pathology/view-backup (should see some there now).
The hourly and daily backup files are retained for 5 and 14 days respectively.
daily at 3 am - keep for 14 days (14 files)
hourly - keep for 5 days (24*5 = 120 files)
Total: 134 files
18Oct2022 a2 10:27am: 154 files

Set permission for pg_backup.sh and alert_dba:
-rwxr--r-- 1 postgres postgres 1M Sep  6  2022 pg_backup.sh
chmod 744 pg_backup.sh
chmod 744 alert_dba
chmod 755 folders bin and logs
chown postgres filename
chgrp postgres filename

Show for specific user:     
crontab -u apache -l
Edit crontab file, or create one if it doesnâ€™t already exist:
crontab -u apache -e
crontab -u postgres -e

network drive: Octavio Morales


//brbpathologyfs.med.cornell.edu/pathology/view-backup is mount on xits-po-order-prd1:/mnt/pathology/view-backup


Hi Oleg,

Please take a look at the cronjobs and let me know if you have any inputs.
Any backup files under xits-po-order-prd1:/mnt/pathology/view-backup can be used to
test database restoration.
The easiest way is probably to clone this postgres server,
then just overwrite the data directory with the backup file to see
if the database instance can be started.
I can certainly assist with this if required.


Thanks
Yan Shi
Senior Database Administrator
Information Technologies and Services
Weill Cornell Medicine
Direct: 212-746-6853 Mobile: 856-467-8080


The cronjobs are scheduled in the postgresql server xits-po-order-prd1.
You would first stop postgres instance in your machine 157.139.226.86,
 then take any of the backup files under here /mnt/pathology/view-backup,
 untar the file to the data directory (remove the existing one)
 and then re-start postges instance.

Replace backup data folder:
/var/lib/pgsql/14/data/
Start/Stop server:
sudo systemctl stop postgresql-14
sudo systemctl start postgresql-14
su - postgres

-bash-4.2$ hostname
xits-po-order-prd1

The cronjobs are under postgres user:
sudo crontab -u postgres -l
0 0-2,4-23 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-backup" "HOURLY" > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
0 3 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-backup" "DAILY" > /var/lib/pgsql/dba/logs/pg_backup_daily.sh.log 2>&1

create crontab: crontab -e -u postgres
0 0-2,4-23 * * * /srv/order-lab/backup/pg_backup.sh '/mnt/pathology/view-test-backup' 'HOURLY' 'ScanOrder' 'symfony' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
0 3 * * * /srv/order-lab/backup/pg_backup.sh '/mnt/pathology/view-test-backup' 'DAILY' 'ScanOrder' 'symfony' > /var/lib/pgsql/dba/logs/pg_backup_daily.sh.log 2>&1

execute a single backup file:
sudo -u postgres /var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'HOURLY' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
Test DB backup (every 5 min):
*/5 * * * * /srv/order-lab/backup/pg_backup.sh '/mnt/pathology/view-backup/db-backup/' 'TESTFIVEMIN' 'ScanOrder' 'symfony' > /var/lib/pgsql/dba/logs/pg_backup_test.sh.log 2>&1

Mount:
sudo mount -t cifs -o username=shareusername,password=sharepassword //server/share /mnt/pathology/view-backup
//brbpathologyfs.med.cornell.edu/pathology/order-backups/upload-backup

{
"sets" : 
[
{
"idname" : "pg_backup_hourly",
"command" : "/var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'HOURLY' 'dbname' 'dbpass' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1",
"croninterval" : "2h"
},
{
"idname" : "pg_backup_hourly",
"command" : "/var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'DAILY' 'dbname' 'dbpass' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1",
"croninterval" : "1d"
}
]
}

#Mount, backup, unmount:
password="*****"
backup_destination="/home/local_account_name/apps/local_folder_name"
echo $password | sudo -S mount -o username=svc_aperio_spectrum,password='*****',domain='brbpathologyfs' //brbpathologyfs.med.cornell.edu/view-backup $backup_destination
cp -R -u -v /home/local_account_name/apps/backup_data_to_upload/* $backup_destination
sudo umount $backup_destination


ITS
xits-po-order-prd2/Disk-General is CRITICAL

DISK CRITICAL - free space: / 5845 MiB (4.85% inode=92%): /tmp 5845 MiB (4.85% inode=92%): /boot 118 MiB (20.27% inode=100%):



1@xits-po-order-prd2 ~]$ df -h

Filesystem                                                            Size  Used Avail Use% Mounted on

devtmpfs                                                              4.0M     0  4.0M   0% /dev

tmpfs                                                                 3.8G  3.1M  3.8G   1% /dev/shm

tmpfs                                                                 1.6G  153M  1.4G  10% /run

efivarfs                                                              256K   34K  218K  14% /sys/firmware/efi/efivars

/dev/mapper/rootvg-rootlv                                             118G  109G  9.6G  92% /

/dev/sda2                                                             586M  468M  119M  80% /boot

/dev/sda1                                                             649M  7.1M  642M   2% /boot/efi

//brbpathologyfs.med.cornell.edu/pathology/view-backup/upload-backup  3.2P  2.6P  707T  79% /mnt/pathology/view-backup/upload-backup

//brbpathologyfs.med.cornell.edu/pathology/view-backup/db-backup      3.2P  2.6P  707T  79% /mnt/pathology/view-backup/db-backup

tmpfs                                                                 769M     0  769M   0% /run/user/12211

Problem is in /tmp folder used to generate temporary DB backup and deleting it after compressing with gzip (manage_postgres_db.py -> compress_file)
