# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
    - { resource: "parameters.yml" }
    - { resource: "../src/App/UserdirectoryBundle/Resources/config/services.yml" }
    - { resource: "../src/App/FellAppBundle/Resources/config/services.yml" }
    - { resource: "../src/App/ResAppBundle/Resources/config/services.yml" }
    - { resource: "../src/App/OrderformBundle/Resources/config/services.yml" }
    - { resource: "../src/App/VacReqBundle/Resources/config/services.yml" }
    - { resource: "../src/App/DeidentifierBundle/Resources/config/services.yml" }
    - { resource: "../src/App/CallLogBundle/Resources/config/services.yml" }
    - { resource: "../src/App/CrnBundle/Resources/config/services.yml" }
    - { resource: "../src/App/TranslationalResearchBundle/Resources/config/services.yml" }
    - { resource: "../src/App/DashboardBundle/Resources/config/services.yml" }
    - { resource: "../src/App/UtilBundles/FOSCommentBundle/Resources/config/services.yml" }
    - { resource: "setparameters.php" } #must run after importing services
#    - { resource: "setparameters-test.php" } #must run after importing services

services:

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    Symfony\Component\DependencyInjection\ContainerInterface: '@service_container'
#    Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface: ~
#    Symfony\Component\Security\Core\Security: ~
#    Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactoryInterface: ~
#    Psr\Container\ContainerInterface: ~

#    authenticator_utility:
#        class:     App\UserdirectoryBundle\Security\Authentication\AuthUtil
#
#    oleg.listener.maintenance:
#            class: App\UserdirectoryBundle\Services\MaintenanceListener
#            tags:
#                - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
#
#    oleg.listener.exception:
#            class: App\UserdirectoryBundle\Services\ExceptionListener
#            arguments: ["@service_container","@doctrine.orm.entity_manager"]
#            tags:
#                - { name: kernel.event_listener, event: kernel.exception }
#
#    employees_authentication_handler:
#            class: App\UserdirectoryBundle\Security\Authentication\LoginSuccessHandler
#            arguments:  ["@service_container", "@doctrine.orm.entity_manager"]


#https://symfony.com/doc/6.0/service_container/import.html
#When loading a configuration file, Symfony loads first the imported files and then it processes the parameters and services defined in the file. If you use the default services.yaml configuration as in the above example, the App\ definition creates services for classes found in ../src/*. If your imported file defines services for those classes too, they will be overridden.

#A possible solution for this is to add the classes and/or directories of the imported files in the exclude option of the App\ definition. Another solution is to not use imports and add the service definitions in the same file, but after the App\ definition to override it.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    #Remove autowire for Classes using extends vendor Classes: can be done here, for example adding folder 'Query' (App\UserdirectoryBundle\Query) to exclude
    App\:
#        resource: '../src/App/*/*'
#        resource: '../src/App/*'
#        resource: '../src/App/*/Util'
        #resource: '../src/App/*/*/Util/'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        resource: '../src/App/*/Util/'
        exclude:
            - '../src/App/Migrations'
            - '../src/App/*/{Entity,Cert,Tests,Query,Repository}'
            - '../src/App/*/{DependencyInjection,Tests,Query,Repository}'
            - '../src/App/*/{Security,Services}'
            - '../src/Kernel.php'

    App\UserdirectoryBundle\User\Model\:
        resource: '../src/App/UserdirectoryBundle/User/Model'

    App\UserdirectoryBundle\Security\Authentication\:
        resource: '../src/App/UserdirectoryBundle/Security/Authentication'
        exclude: '../src/App/UserdirectoryBundle/Security/Authentication/{AuthUtil.php,CustomGuardAuthenticator.php,LoginSuccessHandler.php,CustomUsernamePasswordToken.php}'

#    authenticator_utility:
#            class:     App\UserdirectoryBundle\Security\Authentication\AuthUtil
#
#    oleg.listener.maintenance:
#        class: App\UserdirectoryBundle\Services\MaintenanceListener
#        tags:
#            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
#
#    oleg.listener.exception:
#        class: App\UserdirectoryBundle\Services\ExceptionListener
#        tags:
#            - { name: kernel.event_listener, event: kernel.exception }
#
#    twigdate.listener.request:
#        class: App\UserdirectoryBundle\Services\TwigDateRequestListener
#        arguments: ["@twig", '%default_time_zone%']
#        #arguments: ["@twig", "@security.token_storage", '%default_time_zone%']
#        tags:
#              - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
#
#    oleg.upload_listener:
#        class: App\UserdirectoryBundle\Services\UploadListener
#        tags:
#            - { name: kernel.event_listener, event: oneup_uploader.post_persist, method: onUpload }
#
#    user_formnode_utility:
#        class: App\UserdirectoryBundle\Util\FormNodeUtil
#
#    user_service_utility:
#        class: App\UserdirectoryBundle\Util\UserServiceUtil


#If controllers are defined here as services, then util services are not available
#in the controllers via $this->get('service_name) (i.e. $calllogUtil = $this->get('calllog_util');)
#They should be injected via indexAction(CallLogUtil $calllogUtil)
    App\UserdirectoryBundle\Controller\:
        resource: '../src/App/UserdirectoryBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\CallLogBundle\Controller\:
        resource: '../src/App/CallLogBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\CrnBundle\Controller\:
        resource: '../src/App/CrnBundle/Controller/'
    App\FellAppBundle\Controller\:
        resource: '../src/App/FellAppBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\ResAppBundle\Controller\:
        resource: '../src/App/ResAppBundle/Controller/'
    App\TranslationalResearchBundle\Controller\:
        resource: '../src/App/TranslationalResearchBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\VacReqBundle\Controller\:
        resource: '../src/App/VacReqBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\OrderformBundle\Controller\:
        resource: '../src/App/OrderformBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\DeidentifierBundle\Controller\:
        resource: '../src/App/DeidentifierBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\DashboardBundle\Controller\:
        resource: '../src/App/DashboardBundle/Controller/'

    App\UtilBundles\FOSCommentBundle\Controller\:
        resource: '../src/App/UtilBundles/FOSCommentBundle/Controller/'



    ################## Commands ##################
    App\UserdirectoryBundle\Command\TestCommand:
        tags:
            - { name: 'console.command', command: 'app:simple-tests' }

    App\UserdirectoryBundle\Command\CronCommand:
        tags:
            - { name: 'console.command', command: 'cron:delete-orphan' }

    App\UserdirectoryBundle\Command\StatusCronCommand:
        tags:
            - { name: 'console.command', command: 'cron:status' }

    App\UserdirectoryBundle\Command\StatusTestCronCommand:
        tags:
            - { name: 'console.command', command: 'cron:statustest' }

    App\UserdirectoryBundle\Command\SwiftCronCommand:
        tags:
            - { name: 'console.command', command: 'cron:swift' }

    App\UserdirectoryBundle\Command\UtilCommand:
        tags:
            - { name: 'console.command', command: 'cron:util-command' }


    App\FellAppBundle\Command\GenerateReportRunCommand:
        tags:
            - { name: 'console.command', command: 'fellapp:generatereportrun' }

    App\FellAppBundle\Command\GenerateTestReportRunCommand:
            tags:
                - { name: 'console.command', command: 'fellapp:generate-test-reportrun' }

    App\FellAppBundle\Command\CronCommand:
        tags:
            - { name: 'console.command', command: 'cron:importfellapp' }

    App\FellAppBundle\Command\CronDeleteOldSheetCommand:
        tags:
            - { name: 'console.command', command: 'cron:deleteoldsheetfellapp' }

    App\FellAppBundle\Command\GenerateReportCommand:
        tags:
            - { name: 'console.command', command: 'fellapp:generatereport' }

    App\FellAppBundle\Command\VerifyImportCommand:
            tags:
                - { name: 'console.command', command: 'cron:verifyimport' }

    App\ResAppBundle\Command\GenerateReportRunCommand:
        tags:
            - { name: 'console.command', command: 'resapp:generatereportrun' }

    App\TranslationalResearchBundle\Command\CronCommand:
        tags:
            - { name: 'console.command', command: 'cron:invoice-reminder-emails' }

#    App\TranslationalResearchBundle\Command\ExpirationCronCommand:
#        tags:
#            - { name: 'console.command', command: 'cron:expiration-reminder-emails' }
    ################## EOF Commands ##################

    logger:
        alias: 'monolog.logger'
        public: true

#    Monolog\Logger:
#        autowire: false

#    oleg.twig.extension.date:
#        class: Twig_Extensions_Extension_Date
#        #arguments: ["@translator"]
#        tags:
#            - { name: 'twig.extension' }


oneup_uploader:
    mappings:
        employees_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%employees.uploadpath%'
        scan_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%scan.uploadpath%'
        fellapp_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%fellapp.uploadpath%'
        resapp_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%resapp.uploadpath%'
        vacreq_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%vacreq.uploadpath%'
        transres_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%transres.uploadpath%'
        calllog_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%calllog.uploadpath%'
        crn_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%crn.uploadpath%'
        dashboard_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%dashboard.uploadpath%'



