# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
#parameters:
#    database_driver: pdo_pgsql
#    database_host: 127.0.0.1
#    database_port: 5432
#    database_name: database_name
#    database_user: database_user
#    database_password: database_password
#    database_driver_external: pdo_sqlsrv
#    database_host_external: a.med.cornell.edu
#    database_port_external: null
#    database_name_external: database_name_external
#    database_user_external: database_user_external
#    database_password_external: database_password_external
#    locale: en
#    secret: secret
#    delivery_strategy: realtime
#    swift_delivery_addresses:
#        - email@med.cornell.edu
#    mailer_host: smtp.gmail.com
#    mailer_port: 587
#    mailer_transport: smtp
#    mailer_user: null
#    mailer_password: null
#    mailer_auth_mode: login
#    mailer_encryption: tls
#    connection_channel: http

imports:
    - { resource: parameters.yml }
#    - { resource: "../src/App/UserdirectoryBundle/Resources/config/services.yml" }
#    - { resource: "@AppOrderformBundle/Resources/config/services.yml" }
#    - { resource: "@AppFellAppBundle/Resources/config/services.yml" }
#    - { resource: "@AppVacReqBundle/Resources/config/services.yml" }
#    - { resource: "@AppDeidentifierBundle/Resources/config/services.yml" }
#    - { resource: "@AppCallLogBundle/Resources/config/services.yml" }
#    - { resource: "@AppTranslationalResearchBundle/Resources/config/services.yml" }
#    - { resource: "@AppUserdirectoryBundle/Resources/config/setparameters.php" }   #must run after importing services
    - { resource: "../src/App/UserdirectoryBundle/Resources/config/services.yml" }
    - { resource: "../src/App/FellAppBundle/Resources/config/services.yml" }
    - { resource: "../src/App/ResAppBundle/Resources/config/services.yml" }
    - { resource: "../src/App/OrderformBundle/Resources/config/services.yml" }
    - { resource: "../src/App/VacReqBundle/Resources/config/services.yml" }
    - { resource: "../src/App/DeidentifierBundle/Resources/config/services.yml" }
    - { resource: "../src/App/CallLogBundle/Resources/config/services.yml" }
    - { resource: "../src/App/CrnBundle/Resources/config/services.yml" }
    - { resource: "../src/App/TranslationalResearchBundle/Resources/config/services.yml" }
    - { resource: "../src/App/DashboardBundle/Resources/config/services.yml" }
    - { resource: "../src/App/UtilBundles/FOSCommentBundle/Resources/config/services.yml" }
    - { resource: "setparameters.php" } #must run after importing services
#    - { resource: "setparameters-test.php" } #must run after importing services

#    - { resource: "@FOSCommentBundle/Resources/config/controller.xml" }

#    - { resource: "@FOSCommentBundle/Resources/config/services.yaml" }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
#        bind:
#             $projectDir: '%kernel.project_dir%'
#        bind:
#            $variableName: 'someValue'
##            App\VacReqBundle\Util\VacReqUtil $vacreqUtil: '@vacreq_util'
#            App\VacReqBundle\Util\VacReqUtil: '@vacreq_util'
#            App\VacReqBundle\Util\VacReqImportData $vacReqImportData: '@vacreq_import_data'
#            App\CallLogBundle\Util\CallLogUtil $calllogUtil: '@calllog_util'

    #Doctrine\Common\Lexer\AbstractLexer: ~
    #Doctrine\Common\Lexer\AbstractLexer:
    #    class: App\Doctrine\Common\Lexer\AbstractLexer

        #App\UserdirectoryBundle\Services\AbstractLexer:
            #decorates: Doctrine\Common\Lexer\AbstractLexer

    Symfony\Component\DependencyInjection\ContainerInterface: '@service_container'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    #Remove autowire for Classes using extends vendor Classes: can be done here, for example adding folder 'Query' (App\UserdirectoryBundle\Query) to exclude
    App\:
#        resource: '../src/App/*/*'
#        resource: '../src/App/*'
        resource: '../src/App/*/Util'
        #resource: '../src/App/*/*/Util/'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../src/App/*/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Query,Repository,Security,Services}'

    App\UserdirectoryBundle\User\Model\:
        resource: '../src/App/UserdirectoryBundle/User/Model'

    App\UserdirectoryBundle\Security\Authentication\:
        resource: '../src/App/UserdirectoryBundle/Security/Authentication'
        exclude: '../src/App/UserdirectoryBundle/Security/Authentication/{CustomGuardAuthenticator.php,LoginSuccessHandler.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
#    App\Controller\:
##        namespace: App\
#        resource: '../src/App/*/*/Controller/'
#        #resource: '../src/App/*/Controller/'
#        tags: ['controller.service_arguments']

#If controllers are defined here as services, then util services are not available
#in the controllers via $this->get('service_name) (i.e. $calllogUtil = $this->get('calllog_util');)
#They should be injected via indexAction(CallLogUtil $calllogUtil)
    App\UserdirectoryBundle\Controller\:
        resource: '../src/App/UserdirectoryBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\CallLogBundle\Controller\:
        resource: '../src/App/CallLogBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\CrnBundle\Controller\:
        resource: '../src/App/CrnBundle/Controller/'
    App\FellAppBundle\Controller\:
        resource: '../src/App/FellAppBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\ResAppBundle\Controller\:
        resource: '../src/App/ResAppBundle/Controller/'
    App\TranslationalResearchBundle\Controller\:
        resource: '../src/App/TranslationalResearchBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\VacReqBundle\Controller\:
        resource: '../src/App/VacReqBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\OrderformBundle\Controller\:
        resource: '../src/App/OrderformBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\DeidentifierBundle\Controller\:
        resource: '../src/App/DeidentifierBundle/Controller/'
#        tags: ['controller.service_arguments']
    App\DashboardBundle\Controller\:
        resource: '../src/App/DashboardBundle/Controller/'

    App\UtilBundles\FOSCommentBundle\Controller\:
        resource: '../src/App/UtilBundles/FOSCommentBundle/Controller/'

    #FOS\CommentBundle\Controller
#    App\Controller\:
#        resource: '@FOSCommentBundle/Controller/'

#    App\UserdirectoryBundle\Controller\UserController: ~

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #Remove autowire for Classes using extends vendor Classes
#    App\UserdirectoryBundle\Query\CastFunction:
#        autowire: false
#    App\UserdirectoryBundle\Query\GroupConcat:
#        autowire: false

#    App\Log\CustomLogger:
#        arguments: ['@logger']
#        tags:
#            - { name: monolog.logger, channel: app }

    #App\CallLogBundle\Controller\DataQualityController:
    #    arguments:  ["@service_container", "@doctrine.orm.entity_manager"]
    #App\CallLogBundle\Controller\CallEntryController: ~
    #    arguments:  ["@service_container", "@doctrine.orm.entity_manager"]

#    App\VacReqBundle\Controller\ApproverController:
#        arguments: ["@vacreq_util"]
#        bind:
#            $vacreqUtil: '@vacreq_util'


    ################## Commands ##################
    App\UserdirectoryBundle\Command\TestCommand:
        tags:
            - { name: 'console.command', command: 'app:simple-tests' }

    App\UserdirectoryBundle\Command\CronCommand:
        tags:
            - { name: 'console.command', command: 'cron:delete-orphan' }

    App\UserdirectoryBundle\Command\StatusCronCommand:
        tags:
            - { name: 'console.command', command: 'cron:status' }

    App\UserdirectoryBundle\Command\StatusTestCronCommand:
        tags:
            - { name: 'console.command', command: 'cron:statustest' }

    App\UserdirectoryBundle\Command\SwiftCronCommand:
        tags:
            - { name: 'console.command', command: 'cron:swift' }

    App\UserdirectoryBundle\Command\UtilCommand:
        tags:
            - { name: 'console.command', command: 'cron:util-command' }


    App\FellAppBundle\Command\GenerateReportRunCommand:
        tags:
            - { name: 'console.command', command: 'fellapp:generatereportrun' }

    App\FellAppBundle\Command\GenerateTestReportRunCommand:
            tags:
                - { name: 'console.command', command: 'fellapp:generate-test-reportrun' }

    App\FellAppBundle\Command\CronCommand:
        tags:
            - { name: 'console.command', command: 'cron:importfellapp' }

    App\FellAppBundle\Command\CronDeleteOldSheetCommand:
        tags:
            - { name: 'console.command', command: 'cron:deleteoldsheetfellapp' }

    App\FellAppBundle\Command\GenerateReportCommand:
        tags:
            - { name: 'console.command', command: 'fellapp:generatereport' }

    App\FellAppBundle\Command\VerifyImportCommand:
            tags:
                - { name: 'console.command', command: 'cron:verifyimport' }

    App\ResAppBundle\Command\GenerateReportRunCommand:
        tags:
            - { name: 'console.command', command: 'resapp:generatereportrun' }

    App\TranslationalResearchBundle\Command\CronCommand:
        tags:
            - { name: 'console.command', command: 'cron:invoice-reminder-emails' }

#    App\TranslationalResearchBundle\Command\ExpirationCronCommand:
#        tags:
#            - { name: 'console.command', command: 'cron:expiration-reminder-emails' }
    ################## EOF Commands ##################

    logger:
        alias: 'monolog.logger'
        public: true

#    Monolog\Logger:
#        autowire: false

#    oleg.twig.extension.date:
#        class: Twig_Extensions_Extension_Date
#        #arguments: ["@translator"]
#        tags:
#            - { name: 'twig.extension' }


oneup_uploader:
    mappings:
        employees_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%employees.uploadpath%'
        scan_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%scan.uploadpath%'
        fellapp_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%fellapp.uploadpath%'
        resapp_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%resapp.uploadpath%'
        vacreq_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%vacreq.uploadpath%'
        transres_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%transres.uploadpath%'
        calllog_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%calllog.uploadpath%'
        crn_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%crn.uploadpath%'
        dashboard_gallery:
            frontend: dropzone
            storage:
                directory: 'Uploaded/%dashboard.uploadpath%'

#sensio_framework_extra:
#    router:      { annotations: true } # Deprecated; use routing annotations of Symfony core instead
#    request:     { converters: true, auto_convert: true }
#    view:        { annotations: true }
#    cache:       { annotations: true }
#    security:    { annotations: true }
#    psr_message: { enabled: false } # Defaults to true if the PSR-7 bridge is installed


