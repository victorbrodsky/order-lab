New installation procedure (Alma10):

1) Install git
sudo yum install -y git

2) Install initial instance
cd /srv
git clone https://github.com/victorbrodsky/order-lab.git
cd order-lab/packer/

3) Run main installation script to install apache, php, postgres, utilities and other necessary modules. Run time ~10 min
bash alma10_install.sh symfony symfony | tee 1_install.log

4) Install HaProxy, tenant instances, httpds Run time ~15 min
bash install-multitenancy.sh -u symfony -t symfony -m haproxy -p /srv -s none -d none -e none -l none | tee 2_multitenancy.log

5) Check and install nodejs if 'yarn --version' failed. This was already installed in alma10_install.sh
sudo yum install -y yarn
#Error: warning: Signature not supported. Hash algorithm SHA1 not available.
#Solution:
#update-crypto-policies --set LEGACY
#sudo yum install -y yarn

6) Initialize homepagemanager and tenant-manager tenants:
http://ip/directory/admin/first-time-login-generation-init/
http://ip/tenant-manager/directory/admin/first-time-login-generation-init/

7) Check home page http://ip

###########################################################
############### Additional verification ###################
###########################################################

Make sure use http if ssl certificate is not available:
http://165.227.99.133/directory/login

Check apache:
systemctl status httpd.service

Check postgres log:
less /var/lib/pgsql/18/data/log/postgresql-Fri.log

Check haproxy log:
journalctl -u haproxy

For HaProxy check /etc/httpd/conf.d/ssl.conf does not exists
Certificate not found:
/etc/httpd/conf.d
Remove all ssl.conf for now (rename to ssl.conf_ORIG)

Check DB status:
# php bin/console doctrine:migrations:status
# php bin/console doctrine:migration:sync-metadata-storage
# php bin/console doctrine:migrations:version --add --all
# php bin/console doctrine:schema:validate

Check if php gd installed:
Check: php -m | grep gd
Install: sudo dnf install php-gd

Add alias command:
vim ~/.bashrc
alias lsl="ls -lrt"
source ~/.bashrc

Initialize other tenants manually or via tenant-manager page (https://ip/tenant-manager/directory/settings/tenant-manager/configure/):
http://157.139.226.212/directory/admin/first-time-login-generation-init/
http://157.139.226.212/tenant-manager/directory/admin/first-time-login-generation-init/
http://157.139.226.212/c/demo-institution/demo-department/directory/admin/first-time-login-generation-init/
http://157.139.226.212/c/wcm/psychiatry/directory/admin/first-time-login-generation-init/
http://157.139.226.212/c/test-institution/test-department/directory/admin/first-time-login-generation-init/

pgAdmin access:
replace 'md5' with 'trust' in /var/lib/pgsql/16/data/pg_hba.conf
psql -U postgres
list dbs: \l
list users: \du
ALTER USER postgres PASSWORD 'postgres';
passwd postgres
v: sudo systemctl stop firewalld
Check folder size: du -sh Uploaded
sudo service php-fpm restart

pgAdmin access: Modify pg_hba.conf in /var/lib/pgsql/data to replace "ident" and "peer" to "md5"
sudo systemctl restart postgresql-17

Might need:
restore using data only => valid schema
php bin/console doctrine:database:drop --force
php bin/console doctrine:database:create
php bin/console doctrine:migration:sync-metadata-storage
php bin/console doctrine:schema:update --force
php bin/console doctrine:migrations:version --add --all
php bin/console doctrine:schema:validate
php bin/console doctrine:migrations:status

SELinux is preventing /usr/sbin/haproxy from name_connect access
setsebool -P haproxy_connect_any=1
Or: sudo setenforce 0

Firewall to access pgAdmin:
firewall-cmd --permanent --zone public --add-port 80/tcp
firewall-cmd --permanent --zone public --add-port 443/tcp
firewall-cmd --reload

Verify:
sudo systemctl status httpd.service
sudo systemctl status haproxy
sudo systemctl status php-fpm
sudo systemctl status postgresql-18
sudo systemctl status httpdhomepagemanager
sudo systemctl status httpdtenantmanager
sudo systemctl status httpdtenantapp1
sudo systemctl status httpdtenantapp2
sudo systemctl status httpdtenantappdemo

sudo systemctl restart haproxy
sudo systemctl restart php-fpm
sudo systemctl restart httpdhomepagemanager

Steps to make sure:
sudo systemctl stop httpd.service

https://www.geeksforgeeks.org/how-to-dump-and-restore-postgresql-database/
Create DB from live
pgAdmin:
To Backup a database using pgAdmin4 (To get a data dump using a pgAdmin4):

    Open pgAdmin 4 and connect to your server.
    Select the database you wish to back up from the left sidebar.
    Right-click on the database and choose Backup.
    Specify the file path and name (i.e. backupdb-live-12March2025.sql) for the backup file in the Filename field.
    Choose the format you want (e.g., Custom, Tar, Plain, Directory) from the format dropdown.
    Click Backup

The Custom and Tar formats save the backup in binary SQL, which is more suitable for restores involving more complex data types and faster restoration

Create archive for Upload folder:
tar -czf backupfiles-live-11March2025.tar.gz Upload

Restore (copy / transfer file from one server to another):
Rsync (run on live server -> sending to new server):
rsync -avz /opt/order-lab/orderflex/var/backups/backupdb-live-WCMEXT-20241217-220006-tenantapp1.dump.gz oli2002@157.139.226.212:/home/oli2002/uploads
rsync -avz /srv/order-lab/orderflex/var/backups/backupfiles-live_WCMINT_2024-12-17-21-48-45.tar.gz oli2002@157.139.226.212:/home/oli2002/backupfiles-live_WCMINT_2024-12-17-21-48-45.tar.gz
rsync -avz /srv/order-lab/orderflex/var/backups/backupfiles-live-11March2025.tar.gz oli2002@157.139.226.135:/home/oli2002/backupfiles-live-11March2025.tar.gz
Live server: 157.139.226.135
tar -xzf community_images.tar.gz -C some_custom_folder_name
Compare folder sizes: du -sh Uploaded

pgAdmin:
"Create" > "Database..." > Save
Right-click on the 'recoverdb' database you just created and select "Restore."
In the dialog box that appears, navigate to the location of your backup file ('northwind_backup.sql') and select it.
Click "Restore" to initiate the restoration process.

After DB restore check (reference function restoreDBWrapper):
env
connectionChannel (set http for HaProxy)
urlConnectionChannel (set https for HaProxy if using ssl certificate)
networkDrivePath
monitorScript
mailerdeliveryaddresses

Optional:
to test the functionality set mailerDeliveryAddresses to oli2002
to avoid stealing fellapp, turn off imports

Make certificate for HaProxy:
cat fullchain.pem privkey.pem > fullchain_key.pem

Create config for manual backup

////////// Mount backup drive /////////////////
Make sure to have a key: /srv/order-lab/orderflex/src/App/FellAppBundle/Util/quickstart-FellowshipAuth.json

#Check and mount network shared drive
#Note: modify permission for apache user
#1) sudo visudo:
# a) Defaults:apache !requiretty
# b) apache ALL= NOPASSWD: /sbin/mount.cifs
#Optional: Modify visudo to give apache permission to run mount command:
#Add apache as root: usermod -aG wheel apache

Install cifs-utils: dnf install cifs-utils
Make sure to have a key file for mount external backup drive
credentials=/mnt/pathology/view-backup/credentials.txt
python3 /srv/order-lab-tenantapp1/backup/mountdrive.py -a 'postgres' -n '//brbpathologyfs.med.cornell.edu/pathology/view-backup/db-backup' -l '/mnt/pathology/view-backup/db-backup' -c /mnt/pathology/view-backup/credentials.txt
python3 /srv/order-lab-tenantapp1/backup/mountdrive.py -a 'postgres' -n '//brbpathologyfs.med.cornell.edu/pathology/view-backup/upload-backup' -l '/mnt/pathology/view-backup/upload-backup' -c /mnt/pathology/view-backup/credentials.txt
Check mount folders: findmnt

Set permission to 755 for upload-backup and db-backup
-rw-r--r-- 1 apache   apache   1M Nov 15  2022 credentials.txt
drwxrwxr-x 2 apache   apache   0M Nov 16  2022 upload-backup
drwxrwxr-x 2 postgres postgres 0M Oct  3 07:00 db-backup
Make sure permissions are correct:
chmod 755 upload-backup
chmod 755 db-backup
chown -R apache upload-backup
chown -R postgres db-backup
chgrp apache upload-backup
chgrp postgres db-backup

#1) sudo visudo:
# a) Defaults:apache !requiretty
# b) apache ALL= NOPASSWD: /sbin/mount.cifs
////////// EOF Mount backup drive /////////////////

Setup postgres backup:
add to crontab: crontab -u postgres -e
0 0-2,4-23 * * * /srv/order-lab-tenantapp1/backup/pg_backup.sh "/mnt/pathology/view-backup/db-backup/" "HOURLY" mydbname mydbusername > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
0 3 * * * /srv/order-lab-tenantapp1/backup/pg_backup.sh "/mnt/pathology/view-backup/db-backup/" "DAILY" mydbname mydbusername > /var/lib/pgsql/dba/logs/pg_backup_daily.sh.log 2>&1

Original:
0 0-2,4-23 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-backup/db-backup/" "HOURLY" > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
0 3 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-backup/db-backup/" "DAILY" > /var/lib/pgsql/dba/logs/pg_backup_daily.sh.log 2>&1

start as postgres user: sudo -u postgres /srv/order-lab-tenantapp1/backup/pg_backup.sh ...

Check all crons for all users:
tail -n 1000 /var/spool/cron/*
or
for user in $(cut -f1 -d: /etc/passwd); do echo $user; crontab -u $user -l; done

Check space usage: df -h
Get total folder size: du -sh upload-backup/

Sort folders by size (largest first)
du -sh * | sort -hr
