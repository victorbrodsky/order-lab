{#
    Copyright 2017 Cornell University

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
#}

{% extends "AppVacReqBundle/Default/base.html.twig" %}

{% import "AppOrderformBundle/Default/formmacros.html.twig" as formmacros %}
{% import "AppUserdirectoryBundle/Default/usermacros.html.twig" as usermacros %}
{% import "AppUserdirectoryBundle/Tree/treemacros.html.twig" as treemacros %}
{% import "AppVacReqBundle/Default/vacreqmacros.html.twig" as vacreqmacros %}
{% import "AppUserdirectoryBundle/Default/userformmacros.html.twig" as userform %}


{% if "show" in cycle %}
    {% set showFlag = true %}
{% else %}
    {% set showFlag = false %}
{% endif %}


{% if review is not defined %}
    {% set review = false %}
{% endif %}

{% block title %}
    {{ title }}
{% endblock %}



{% block content %}

    <input type="hidden" id="formcycle" value="{{ cycle }}" />
    <input type="hidden" id="requestType" value="{{ entity.getRequestTypeAbbreviation() }}" />
    {#<input type="hidden" id="maxcarryovervacationdays" value="{{ user_security_utility.getSiteSettingParameter('maxCarryOverVacationDays','vacreq') }}" />#}
    <input type="hidden" id="maxcarryovervacationdays" value="{{ vacreq_util.getValueApprovalGroupTypeByUser('maxCarryOverVacationDays') }}" />
    <input type="hidden" id="authuser_id" value="{{app.user.getId()}}" />

    {% if totalAccruedDays is defined %}
        <input type="hidden" id="totalAccruedDays" value="{{ totalAccruedDays }}" />
    {% endif %}
    {% if remainingDays is defined %}
        <input type="hidden" id="remainingDays" value="{{ remainingDays }}" />
    {% endif %}

    {% if is_granted('ROLE_VACREQ_ADMIN') %}
        <input type="hidden" id="vacreq_admin" value="admin" />
    {% else %}
        <input type="hidden" id="vacreq_admin" value="" />
    {% endif %}

    {% if overlappedMessage is defined and overlappedMessage %}
        <div class="alert alert-danger">
            {{ overlappedMessage|raw }}
        </div>
    {% endif %}

    {% if is_granted('ROLE_VACREQ_ADMIN') %}
        {% if accessreqs is defined and accessreqs and accessreqs > 0 %}
            {% set prefixStr = "There is" %}
            {% set postfixStr = "unprocessed access request." %}
            {% if accessreqs > 1 %}
                {% set prefixStr = "There are" %}
                {% set postfixStr = "unprocessed access requests." %}
            {% endif %}
            <div class="alert alert-warning">
                {{ prefixStr }} <a href="{{ path(vacreq_sitename~'_accessrequest_list') }}" target="_blank">{{ accessreqs }} {{ postfixStr }}</a>
            </div>
        {% endif %}

        {% if carryoverPendingRequests is defined and carryoverPendingRequests and carryoverPendingRequests > 0 %}
            {% set prefixStr = "There is" %}
            {% set postfixStr = "unprocessed Carry Over request." %}
            {% if carryoverPendingRequests > 1 %}
                {% set prefixStr = "There are" %}
                {% set postfixStr = "unprocessed Carry Over requests." %}
            {% endif %}
            <div class="alert alert-warning">
                {{ prefixStr }} <a href="{{ path(vacreq_sitename~'_incomingrequests',{'filter[requestType]':requestTypeCarryOverId}) }}" target="_blank">{{ carryoverPendingRequests }} {{ postfixStr }}</a>
            </div>
        {% endif %}
    {% endif %}

    {% if overlapped is defined and overlapped %}
        <div class="alert alert-danger">
            <p id="vacreq-overlapped-str">
                {% if overlapped %}
                    {{ overlapped|raw }}
                {% endif %}
            </p>
        </div>
    {% endif %}

    {% if noteForVacationDays is defined and noteForVacationDays %}
        <div class="alert alert-success">
            <p id="vacreq-noteForVacationDays-str">
                {{ noteForVacationDays|raw }}
            </p>
        </div>
    {% endif %}

    {% if noteForCarryOverDays is defined and noteForCarryOverDays %}
        <div class="alert alert-success">
            <p id="vacreq-noteForCarryOverDays-str">
                {{ noteForCarryOverDays|raw }}
            </p>
        </div>
    {% endif %}

    {#First header - vacation infor + carry over#}
    {% if totalApprovedDaysString is defined and totalApprovedDaysString %}
        <div class="alert alert-success">
            <p id="vacreq-totalapproved-days-str">{{ totalApprovedDaysString|raw }}</p>
            <p id="vacreq-accrued-days-str">{{ accruedDaysString|raw }}</p>
            {% if carriedOverDaysString %}
                <p id="vacreq-carryover-days-str">{{ carriedOverDaysString|raw }}</p>
            {% endif %}
            <p id="vacreq-remaining-days-str">{{ remainingDaysString|raw }}</p>
        </div>
    {% endif %}

    {#Second header - only carry over#}
    {% if newCarryOverRequestStr is defined and newCarryOverRequestStr %}
        <div class="alert alert-success">
            <p id="vacreq-new-carryover-request-str">{{ newCarryOverRequestStr|raw }}</p>
        </div>
    {% endif %}

    {% if internationalTravelRegistry is defined and internationalTravelRegistry %}
        <div class="alert alert-success">
            <p id="vacreq-internationa-travel-registry-str">{{ internationalTravelRegistry|raw }}</p>
        </div>
    {% endif %}


    <h4 class="text-info" align="center">
        {{ title }}
    </h4>

    <br>

    {% if (cycle == 'show' or review) and entity.user.id is defined %}
        {{ userform.snapshot_steve(entity.user,vacreq_sitename,cycle) }}
    {% endif %}

    <hr>

    {{ form_start(form,{'attr': {'id': 'vacreq-request-form', 'class': 'vacreq-request-form-class'}}) }}

        {#<div class="my-custom-class-for-errors">#}
            {#{{ form_errors(form) }}#}
        {#</div>#}

        {% if not form.vars.valid %}
            {#form has error!!!!!!!!!#}
            <div class="alert alert-danger" style="background-color: #f2dede; border-color: #ebccd1; color: #a94442;">
                Error: This form contains not valid fields. Please check the fields below.
            </div>
        {% endif %}

        {#{{ treemacros.compositeTreeNode(form.institution,cycle,'') }}#}

        {% if form.approver is defined %}
            {{ formmacros.field(form.approver) }}
        {% endif %}

        {% if form.submitter is defined %}
            {{ formmacros.field(form.submitter) }}
        {% endif %}

        {% if form.user is defined %}
            {{ formmacros.field(form.user) }}
        {% endif %}

        {% if form.phone is defined %}
            {#{{ formmacros.field(form.phone) }}#}
            {{ usermacros.emailPhoneField(form.phone,cycle,'phone',"") }}
        {% endif %}

        {#organizationalInstitution => institution#}
        {% if form.tentativeInstitution is defined %}
            {{ formmacros.field(form.tentativeInstitution) }}
        {% endif %}
        {% if form.institution is defined %}
            {{ formmacros.field(form.institution) }}
        {% endif %}
        {% if form.organizationalInstitution is defined %}
            {{ formmacros.field(form.organizationalInstitution) }}
        {% endif %}

        {#show static defaultInformUsers#}
        <div id="vacreq-holder-defaultInformUsers">
        {{ formmacros.simplefield(
            "Send a notification to the following individuals:",
            "",
            "input",
            "disabled",
            "These individuals are set by the administrator of the organizational group", "vacreq-defaultInformUsers"
            )
        }}
        </div>
        {% if form.informUsers is defined %}
            {{ formmacros.field(form.informUsers) }}
        {% endif %}


        {#Carry Over#}
        {% if entity.getRequestTypeAbbreviation() == "carryover" %}
            {#{% set showCarryoverStatus = false %}#}
            {#{% if entity.status and entity.status is defined %}#}
                {#{% set showCarryoverStatus = true %}#}
            {#{% endif %}#}
            {#set accordion color#}
            {% set CarryoverPanelColor = 'panel-info' %}
            {% if entity.status and entity.status == 'approved' %}
                {% set CarryoverPanelColor = 'panel-success' %}
            {% endif %}
            {% if entity.status and entity.status == 'rejected' %}
                {% set CarryoverPanelColor = 'panel-danger' %}
            {% endif %}

            <div class="panel {{ CarryoverPanelColor }}">
                <div class="panel-heading">
                    <h4 class="panel-title">

                        <a data-toggle="collapse" href="#vacreq-Carryover">
                            Carry Over Request
                        </a>


                    </h4>


                    {% if form.tentativeStatus is defined %}
                        {% set tentativeStatusLabel = 'Tentative Approval Status:' %}
                        {% if form.status is not defined %}
                            {% set tentativeStatusLabel = 'Final Approval Status:' %}
                        {% endif %}
                        <p>
                        <div class="row">
                            <div class="col-xs-6" align="right">
                                {#<a data-toggle="collapse" href="#vacreq-Carryover">#}
                                {#Tentative Approval Status:#}
                                {{ tentativeStatusLabel }}
                                {#</a>#}
                            </div>
                            <div class="col-xs-6" align="left" style="color:#333;">
                                {{ vacreqmacros.request_radio_tentativeStatus_choice( form ) }}
                            </div>
                        </div>
                        </p>
                    {% endif %}

                    {% if form.status is defined %}
                        <p>
                        <div class="row">
                            <div class="col-xs-6" align="right">
                                {#<a data-toggle="collapse" href="#vacreq-Carryover">#}
                                Final Approval Status:
                                {#</a>#}
                            </div>
                            <div class="col-xs-6" align="left" style="color:#333;">
                                {{ vacreqmacros.request_radio_choice( form ) }}
                            </div>
                        </div>
                        </p>
                    {% endif %}


                </div>
                <div id="vacreq-Carryover" class="panel-collapse collapse in">
                    <div class="panel-body">

                        {{ formmacros.field(form.sourceYear) }}
                        {#{{ formmacros.simplefield( "Source Academic Year:", entity.getSourceYearRange(), "input", "disabled" ) }}#}

                        {{ formmacros.field(form.destinationYear) }}
                        {#{{ formmacros.simplefield( "Destination Academic Year:", entity.getDestinationYearRange(), "input", "disabled" ) }}#}

                        {{ formmacros.field(form.carryOverDays) }}

                        {{ formmacros.field(form.comment) }}

                        {#Note fore remaining days#}
                        {#{% if remainingDays is defined and remainingDays %}#}
                            {#<p>Note: you have {{ remainingDays }} remaining vacation days</p>#}
                        {#{% endif %}#}

                    </div> <!-- panel-body -->
                </div> <!-- panel-collapse -->
            </div> <!-- panel panel-info -->
        {% endif %}


        {#Business#}
        {% if form.requestBusiness is defined and (entity.hasBusinessRequest or cycle == 'new' or cycle == 'edit') %}
            {% set showBusinessStatus = false %}
            {% if entity.requestBusiness and entity.requestBusiness.status is defined %}
                {% set showBusinessStatus = true %}
            {% endif %}
            {#set collapse#}
            {% set businessCollapse = '' %}
            {% if (not showFlag and not review) or (entity.requestBusiness and entity.requestBusiness.numberOfDays>0) %}
                {% set businessCollapse = 'in' %}
            {% endif %}
            {#set accordion color#}
            {% set businessPanelColor = 'panel-info' %}
            {% if entity.requestBusiness and entity.requestBusiness.status == 'approved' %}
                {% set businessPanelColor = 'panel-success' %}
            {% endif %}
            {% if entity.requestBusiness and entity.requestBusiness.status == 'rejected' %}
                {% set businessPanelColor = 'panel-danger' %}
            {% endif %}
            {#Business panel#}
            <div class="panel {{ businessPanelColor }}">
                <div class="panel-heading">
                    <h4 class="panel-title" align='center'>
                        {% if showBusinessStatus %}
                            <div class="row">
                                <div class="col-xs-6" align="right">
                                    <a data-toggle="collapse" href="#vacreq-Business">
                                        Business Travel
                                    </a>
                                </div>
                                <div class="col-xs-6" align="left" style="color:#333;">
                                    {{ vacreqmacros.request_radio_choice( form.requestBusiness ) }}
                                </div>
                            </div>
                        {% else %}
                            <a data-toggle="collapse" href="#vacreq-Business">
                                Business Travel
                            </a>
                        {% endif %}
                    </h4>
                </div>
                <div id="vacreq-Business" class="panel-collapse collapse {{ businessCollapse }}">
                    <div class="panel-body">
                        {{ formmacros.fieldDateLabel(form.requestBusiness.startDate,'allow-future-date') }}
                        {{ formmacros.fieldDateLabel(form.requestBusiness.endDate,'allow-future-date') }}

                        {#{{ formmacros.field(form.requestBusiness.numberOfDays) }}#}
                        {#{{ formmacros.fieldDateLabel(form.requestBusiness.firstDayBackInOffice,'allow-future-date') }}#}
                        {{ vacreqmacros.request_inputWithCalculateBtn(form.requestBusiness.numberOfDays) }}
                        {#{{ vacreqmacros.request_dateWithCalculateBtn(form.requestBusiness.firstDayBackInOffice) }}#}

                        {#travelIntakeForms#}
                        {#{{ formmacros.simplefield( "Test:", "test", "input", "disabled" ) }}#}
                        {#{% if form.travelIntakeForms is defined %}#}
                            <div class="well form-element-holder user-travelIntakeForms">
                                <label class="col-xs-12 control-label">Travel Intake Form</label>
                                <div class="row withpaddingtop">
                                    <div class="col-xs-12">
                                        {{ usermacros.documentsContainer(null,form.requestBusiness.travelIntakeForms,cycle,'noprototype',8,'default','Travel Intake Form',"asForm") }}
                                        {#{{ usermacros.documentsContainer(null,form.coverLetters,cycle,'noprototype',8,'default','Fellowship Cover Letter') }}#}
                                    </div>
                                </div>
                            </div>
                        {#{% endif %}#}

                        {{ formmacros.checkbox(form.requestBusiness.paidByOutsideOrganization) }}
                        {{ formmacros.field(form.requestBusiness.expenses) }}

                        {{ formmacros.field(form.requestBusiness.description) }}
                        {% if form.requestBusiness.approverComment is defined and businessCollapse == 'in'  %}
                            {{ formmacros.field(form.requestBusiness.approverComment) }}
                        {% endif %}
                    </div> <!-- panel-body -->
                </div> <!-- panel-collapse -->
            </div> <!-- panel panel-info -->
        {% endif %}

        {#Vacation#}
        {#cycle={{ cycle }}#}
        {% if form.requestVacation is defined and (entity.hasVacationRequest or cycle == 'new' or cycle == 'edit') %}
            {#set vacationCollapse#}
            {% set showVacationStatus = false %}
            {% if entity.requestVacation and entity.requestVacation.status is defined %}
                {% set showVacationStatus = true %}
            {% endif %}
            {#set collapse#}
            {% set vacationCollapse = '' %}
            {% if (not showFlag and not review) or (entity.requestVacation and entity.requestVacation.numberOfDays>0) %}
                {% set vacationCollapse = 'in' %}
            {% endif %}
            {#set accordion color#}
            {% set vacationPanelColor = 'panel-info' %}
            {% if entity.requestVacation and entity.requestVacation.status == 'approved' %}
                {% set vacationPanelColor = 'panel-success' %}
            {% endif %}
            {% if entity.requestVacation and entity.requestVacation.status == 'rejected' %}
                {% set vacationPanelColor = 'panel-danger' %}
            {% endif %}
            {#vacation panel#}
            <div class="panel {{ vacationPanelColor }}">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        {% if showVacationStatus %}
                            <div class="row">
                                <div class="col-xs-6" align="right">
                                    <a data-toggle="collapse" href="#vacreq-Vacation">
                                        Vacation
                                    </a>
                                </div>
                                <div class="col-xs-6" align="left" style="color:#333;">
                                    {{ vacreqmacros.request_radio_choice( form.requestVacation ) }}
                                </div>
                            </div>
                        {% else %}
                            <a data-toggle="collapse" href="#vacreq-Vacation">
                                Vacation
                            </a>
                        {% endif %}
                    </h4>
                </div>
                <div id="vacreq-Vacation" class="panel-collapse collapse {{ vacationCollapse }}">
                    <div class="panel-body">

                        {% if not form.requestVacation.startDate.vars.valid %}
                            {#{{ form.requestVacation.startDate.vars.errors }}#}
                            <div class="alert alert-danger" style="background-color: #f2dede; border-color: #ebccd1; color: #a94442;">
                                {#form has error!!!!!!!!!#}
                                {{ form_errors(form.requestVacation.startDate)|raw }}
                                {#{% do form.requestVacation.startDate.vars.errors|first.setRendered %}#}
                                {#{{ form.requestVacation.startDate.vars.errors }}#}
                            </div>
                        {% endif %}

                        {{ formmacros.fieldDateLabel(form.requestVacation.startDate,'allow-future-date','','noerror') }}

                        {{ formmacros.fieldDateLabel(form.requestVacation.endDate,'allow-future-date') }}

                        {#{{ formmacros.field(form.requestVacation.numberOfDays) }}#}
                        {{ vacreqmacros.request_inputWithCalculateBtn(form.requestVacation.numberOfDays) }}

                        {#{{ formmacros.fieldDateLabel(form.requestVacation.firstDayBackInOffice,'allow-future-date') }}#}
                        {#{{ vacreqmacros.request_dateWithCalculateBtn(form.requestVacation.firstDayBackInOffice) }}#}

                        {% if form.requestVacation.approverComment is defined and vacationCollapse == 'in' %}
                            {{ formmacros.field(form.requestVacation.approverComment) }}
                        {% endif %}
                    </div> <!-- panel-body -->
                </div> <!-- panel-collapse -->
            </div> <!-- panel panel-info -->

            {#{{ formmacros.fieldDateLabel(form.credentials.dob,'allow-future-date') }}#}
        {% endif %}

        {#firstDayBackInOffice#}
        {% if entity.getRequestTypeAbbreviation() == "business-vacation" %}
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" href="#firstDayBackInOffice">
                            First Day Back In Office
                        </a>
                    </h4>
                </div>
                <div id="firstDayBackInOffice" class="panel-collapse collapse in">
                    <div class="panel-body">
                        {% if form.firstDayBackInOffice is defined %}
                            {{ vacreqmacros.request_dateWithCalculateBtn(form.firstDayBackInOffice) }}
                        {% endif %}
                    </div> <!-- panel-body -->
                </div> <!-- panel-collapse -->
            </div> <!-- panel panel-info -->
        {% endif %}

        {#Emergency#}
        {% if form.availableViaEmail is defined %}
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" href="#Emergency">
                            Emergency Contact Info (optional)
                        </a>
                    </h4>
                </div>
                <div id="Emergency" class="panel-collapse collapse in">
                    <div class="panel-body">
                        {#{{ formmacros.field(form.availabilities) }}#}
                        {#{{ formmacros.field(form.emergencyComment) }}#}
                        {#{{ formmacros.field(form.emergencyCellPhone) }}#}
                        {#{{ formmacros.field(form.emergencyOther) }}#}

                        {{ formmacros.field(form.availableViaEmail) }}
                        {{ formmacros.field(form.availableEmail) }}

                        {{ formmacros.field(form.availableViaCellPhone) }}
                        {{ formmacros.field(form.availableCellPhone) }}

                        {{ formmacros.field(form.availableViaOther) }}
                        {{ formmacros.field(form.availableOther) }}

                        {{ formmacros.field(form.availableNone) }}

                    </div> <!-- panel-body -->
                </div> <!-- panel-collapse -->
            </div> <!-- panel panel-info -->
        {% endif %}




        {% if form.status is defined and not form.status.rendered %}
            {{ formmacros.field(form.status) }}
        {% endif %}

        {#{{ form_rest(form) }}#}
        {{ form_row(form._token) }}

    {{ form_end(form,{'render_rest': false}) }}

    <br>

    {% if carryOverWarningMessage is defined and carryOverWarningMessage %}
        <div class="alert alert-danger">
            {{ carryOverWarningMessage|raw }}
        </div>
        <br>
    {% endif %}

    <div id="error-box" class="alert alert-danger" style="display: none"></div>

    <br>

    {#{% if not form.vars.valid %}#}
    {#{% set formError = form_errors(form) %}#}
    {% if form_errors(form) %}
        <div class="alert alert-danger" style="background-color: #f2dede; border-color: #ebccd1; color: #a94442;">
            {#<div class="list-group">#}
            {#<p class="text-danger">#}
            {{ form_errors(form) }}
            {#{{ formError }}#}
            {#</p>#}
            {#</div>#}
        </div>

        {#<div class="form-control">#}
            {#<small>{{ form_help(form) }}</small>#}
            {#<div class="form-error">#}
                {#{{ formError }}#}
            {#</div>#}
        {#</div>#}

        <br>
    {% endif %}

    {% if cycle == "new" %}
        <p>
            <button id="btnCreateVacReq" class="btn btn-warning" name="btnCreate" type="button" onclick="validateVacReqForm(this)">Submit</button>
        </p>
    {% endif %}

    {% set statusPending = false %}
    {% if entity.status == 'pending' or entity.getOverallStatus() == 'pending' %}
        {% set statusPending = true %}
    {% endif %}

    {% if cycle == "edit" or review %}
        <p>
            <button id="btnCreateVacReq" class="btn btn-warning" name="btnUpdate" type="button" onclick="validateVacReqForm(this)">Update</button>
            {% if review %}
                <a class="btn btn-primary" href="{{ path(vacreq_sitename~'_incomingrequests') }}">Cancel</a>
            {% else %}
                <a class="btn btn-primary" href="{{ path(vacreq_sitename~'_show',{'id':entity.id}) }}">Cancel</a>
            {% endif %}
        </p>
    {% endif %}

    {#{% if cycle == "show" and statusPending %}#}
    {% if cycle == "show" and is_granted("update",entity) %}
        <p>
            <a class="btn btn_margin_top btn-primary" href="{{ path(vacreq_sitename~'_edit',{'id':entity.id}) }}">Edit</a>
        </p>
    {% endif %}


{% endblock %}


{% block additionaljs %}

    <script language="Javascript">

        var _requestType = null;

        $(document).ready(function() {

            _requestType = $('#requestType').val();

            //console.log('cycle='+cycle);
            if( _requestType == "business-vacation" && (cycle == 'new' || cycle == 'edit') ) {

                vacreqDateListener();

                vacreqOrgGroupListener();

                vacreqAvailabilityListener();

                //init datepicker manually, because the holder 'input-group' does not have class 'date', but js is looking for .input-group.date
                initSingleDatepicker( $('.vacreq-firstDayBackInOffice') );

            }

            vacreqRemoveErrorListener();

            //vacreqDayWeekListener();

            vacreqSetPersonAway();
            vacreqSetDefaultInformUsers();
            vacreqSetDefaultInformUsersListener();

        });

        function vacreqAvailabilityListener() {
            $('.vacreq-availableNone').on("click", function(e) {
                var holder = $(this).closest('.panel-body');

                if ($(this).is(':checked')) {
                    holder.find('.vacreq-availableViaEmail').prop('checked', false);
                    holder.find('.vacreq-availableEmail').val('');

                    holder.find('.vacreq-availableViaCellPhone').prop('checked', false);
                    holder.find('.vacreq-availableCellPhone').val('');

                    holder.find('.vacreq-availableViaOther').prop('checked', false);
                    holder.find('.vacreq-availableOther').val('');
                }

            });

            $('.vacreq-availableViaEmail, .vacreq-availableViaCellPhone, .vacreq-availableViaOther').on("click", function(e) {
                var holder = $(this).closest('.panel-body');

                if ($(this).is(':checked')) {
                    holder.find('.vacreq-availableNone').prop('checked', false);
                }

            });
        }

        function vacreqAvailabilityListener_OLD() {
            $('.vacreq-availabilities').on("change", function(e) {
                var holder = $(this).closest('.panel-body');
                var availabilities = holder.find('.vacreq-availabilities').select2('data');
                //console.log(availabilities);

                //this returns all the selected item
                var items= $(this).val();
                //console.log('items='+items);

                $.each( availabilities, function( key, value ) {
                    //console.log( key + ": " + value );
                    //console.log( value );
                    var item = value.text;
                    //console.log('item='+item);
                    if( item == "Not Accessible" ) {
                        //clear others
                        holder.find('.vacreq-availabilities').select2('val',value.id);
                    }

                });

            });
        }

        function vacreqRemoveErrorListener() {
            $('input, .vacreq-numberOfDays, .vacreq-expenses, .vacreq-description').on("input", function(e) {
                $(this).removeClass('alert-danger');
                $('#error-box').html('');
                $('#error-box').hide();
            });

            //$('.vacreq-firstDayBackInOffice').datepicker().on("changeDate", function(e) {
            $('.vacreq-firstDayBackInOffice').on("change", function(e) {
                $(this).removeClass('alert-danger');
                $('#error-box').html('');
                $('#error-box').hide();
                vacreqSetDayWeekTooltip($(this));
            });
        }


        //Show black tool tips above the 5 date fields on the home page with
        //the day of the week (Monday, Tuesday, etc) corresponding to the displayed date on the homepage form.
        var _daysOfWeek = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
        function vacreqSetDayWeekTooltip(datepickerElem) {
            var thisDate = datepickerElem.val();
            //console.log("set tooltip="+thisDate);
            //printF(datepickerElem, "changeDate:");
            //console.log(datepickerElem);
            if( thisDate ) {
                //console.log("create tooltip="+thisDate);
                datepickerElem.tooltip({
                    title: function() {
                        //console.log("set tooltip="+_daysOfWeek[thisDate.getDay()]);
                        var tooltipDate = $(this).val();
                        if( tooltipDate ) {
                            //console.log("tooltip title: date=" + tooltipDate);
                            tooltipDate = new Date(tooltipDate);
                            return _daysOfWeek[tooltipDate.getDay()];
                        } else {
                            //console.log("tooltip title: destroy");
                            $(this).tooltip('destroy');
                        }
                    }
                });
            } else {
                //console.log("destroy tooltip="+thisDate);
                datepickerElem.tooltip('destroy');
            }
        }

        function vacreqOrgGroupListener() {
            $('.vacreq-institution').on("change", function(e) {
                console.log('vacreqOrgGroupListener');
                $('.calculate-btn').click();
            });
        }

        function vacreqDateListener() {

//            $('.vacreq-startDate,.vacreq-endDate').on("focusout", function(e) {
//                console.log('Listener1 ! value='+$(this).val());
//                //var holder = $(this).closest('.panel-body');
//                //start or end dates is empty => clear/hide warning and set days to zero
//                //holder.find('.warning-holidays').html('').hide();
//                //holder.find('.vacreq-numberOfDays').val(null);
//
//                var holder = $(this).closest('.panel-body');
//                var startDate = holder.find('.vacreq-startDate').val();
//                var endDate = holder.find('.vacreq-endDate').val();
//                console.log('Listener1: startDate=('+startDate+')' + ', endDate=('+endDate+')');
//            });
//
//            //clearDate
//            $('.vacreq-startDate,.vacreq-endDate').datepicker().on("hide", function(e) {
//                console.log('Listener2 !');
//            });

//            $('.datepicker').datepicker().on('clearDate', function(e) {
//                // `e` here contains the extra attributes
//                console.log('Listener2 !');
//            });

//            $('.vacreq-startDate,.vacreq-endDate').datepicker().on("changeDate", function(e) {
//                console.log('Listener2 !');
//            });

            //$('.vacreq-startDate,.vacreq-endDate').datepicker().on("changeDate", function(e) {
            $('.vacreq-startDate,.vacreq-endDate').on("change", function(e) {
                //vacreqUpdateDaysAndFirstday(this);

                var holder = $(this).closest('.panel-body');

                var startDate = holder.find('.vacreq-startDate').val();
                var endDate = holder.find('.vacreq-endDate').val();
                console.log('vacreqDateListener: startDate=('+startDate+')' + ', endDate=('+endDate+')');

                startDate = new Date(startDate);
                endDate = new Date(endDate);

                //get working days difference
                if( startDate && endDate ) {

                    if( startDate > endDate ) {
                        //e.stopPropagation();
                        //e.preventDefault();
                        alert("The requested End Date cannot precede the Start Date.");
                        $(this).datepicker('setDate', null);
                        e.stopPropagation();
                        return;
                    }

                    //var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds
                    //var difstartDate=fDays = 1 + Math.round(Math.abs((startDate.getTime() - endDate.getTime())/(oneDay)));
                    var diffWorkingDays = calculateWorkingDays(startDate,endDate,holder);
                    //console.log('diffWorkingDays='+diffWorkingDays);

                    if( diffWorkingDays > 0 ) {
                        //numberOfDays
                        //holder.find('.vacreq-numberOfDays').val(diffWorkingDays);

                        //firstDayBackInOffice
                        var nextWorkingDay = getNextWorkingDay();
                        //console.log('nextWorkingDay='+nextWorkingDay);

                        setVacReqDates(holder,diffWorkingDays,nextWorkingDay)
                    }

                } else {
                    //start or end dates is empty => clear/hide warning and set days to zero
                    holder.find('.warning-holidays').html('').hide();
                    holder.find('.vacreq-numberOfDays').val(null);
                }//if

                vacreqSetDayWeekTooltip($(this));
            });

        }

        function setVacReqDates(holder,diffWorkingDays,nextWorkingDay) {

            //var forceSet = false; //This is an initial requirement. However, this causes errors if a submitter change the dates without clicking "Calculate" button.
            var forceSet = true;

            var numberOfDaysField = holder.find('.vacreq-numberOfDays');
            if( !numberOfDaysField.val() || forceSet ) {
                numberOfDaysField.val(diffWorkingDays);
                numberOfDaysField.removeClass('alert-danger');
            }

            var firstDayBackInOffice = $('.vacreq-firstDayBackInOffice');
            if( !firstDayBackInOffice.val() || forceSet ) {
                firstDayBackInOffice.datepicker('setDate', nextWorkingDay);
            }
        }

        //onclick action button
        function setVacReqNumberOfDays(btn) {

            if( cycle != 'new' && cycle != 'edit' ) {
                return;
            }

            var holder = $(btn).closest('.panel-body');
            var startDate = holder.find('.vacreq-startDate').val();
            var endDate = holder.find('.vacreq-endDate').val();
            //console.log('startDate=('+startDate+')' + ', endDate=('+endDate+')');

            startDate = new Date(startDate);
            endDate = new Date(endDate);

            holder.find('.vacreq-numberOfDays').removeClass('alert-danger');

            var diffWorkingDays = null;

            if( startDate && endDate ) {
                if( startDate > endDate ) {
                    alert("The requested Last Day Away cannot precede the First Day Away.");
                    holder.find('.vacreq-numberOfDays').val(null);
                    return null;
                }

                diffWorkingDays = calculateWorkingDays(startDate,endDate,holder);

                if( diffWorkingDays > 0 ) {
                    //numberOfDays
                    holder.find('.vacreq-numberOfDays').val(diffWorkingDays);
                } else {
                    holder.find('.vacreq-numberOfDays').val(null);
                }
            } else {
                //start or end dates is empty => clear/hide warning and set days to zero
                holder.find('.warning-holidays').html('').hide();
                holder.find('.vacreq-numberOfDays').val(null);
            }

            return diffWorkingDays;
        }

        //onclick
        function setVacReqFirstDayBack(btn) {

            if( cycle != 'new' && cycle != 'edit' ) {
                return;
            }

            var nextWorkingDay = getNextWorkingDay();
            //console.log('nextWorkingDay='+nextWorkingDay);
            //return; //testing

            $('.vacreq-firstDayBackInOffice').removeClass('alert-danger');

            if( nextWorkingDay ) {
                //firstDayBackInOffice
                //console.log('nextWorkingDay='+nextWorkingDay);
                $('.vacreq-firstDayBackInOffice').datepicker('setDate', nextWorkingDay);
            } else {
                $('.vacreq-firstDayBackInOffice').datepicker('setDate', null);
            }

            return nextWorkingDay;
        }

        // Count days from d0 to d1 inclusive, excluding Fridays and Saturdays
        function calculateWorkingDays_ORIG( startDate, endDate )  {
            //return 0;//testing
            var days = 0;
            for( var i = startDate; i <= endDate; i.setDate(i.getDate() + 1) ) {
                if( i.getDay() != 6 && i.getDay() != 0 ) {
                    days = days + 1;
                }
            }
            return days;
        }

        //TODO: Calculate working days minus holiday days based on VacReqHolidayList
        function calculateWorkingDays( startDate, endDate, holder )  {
            //console.log('calculateWorkingDays: startDate='+startDate+', endDate='+endDate);

            holder.find('.warning-holidays').html('').hide();
            holder.find('.vacreq-numberOfDays').val(null);

            if( !startDate || startDate == 'Invalid Date' ) {
                console.log("startDate null");
                return null;
            }
            if( !endDate || endDate == 'Invalid Date' ) {
                console.log("endDate null");
                return null;
            }

            //vacreq-institution
            var userInstitution = $('#vacreq-request-form').find('.vacreq-institution').select2('data');
            console.log("userInstitution=",userInstitution);
            var institutionId = 0;
            if( userInstitution ) { //&& userInstitution.length > 0
                institutionId = userInstitution.id;
            }
            if( typeof institutionId === 'undefined' ) {
                institutionId = 0;
            }

            var calculateBtn = holder.find('.calculate-btn');
            var calculateBtnHtml = calculateBtn[0];
            var lbtn = Ladda.create(calculateBtnHtml);
            lbtn.start();

            //console.log('before calculateSimpleWorkingDays: startDate=['+startDate+'], endDate=['+endDate+']');
            var days = calculateSimpleWorkingDays(startDate,endDate);
            //console.log('after calculateSimpleWorkingDays: startDate=['+startDate+'], endDate=['+endDate+']');

            ////// disable holidays //////
            //return days; //comment this out for holidays calculation
            ////// EOF disable holidays //////

            //update #vacreq-defaultInformUsers
            var url = Routing.generate('vacreq_get_observed_holidays_daterange_ajax');
            //console.log('url='+url);

            //Convert to a simple string YYYY-MM-DD
            var startDateStr = formatDateToStringYMD(startDate);
            var endDateStr = formatDateToStringYMD(endDate);
            console.log('calculateWorkingDays3: startDate=['+startDateStr+'], endDate=['+endDateStr+'], institutionId='+institutionId);

            $.ajax({
                url: url,
                timeout: _ajaxTimeout,
                async: false, //code paused until completion
                dataType: 'json',
                data: {startDate: startDateStr, endDate: endDateStr, institutionId: institutionId},
            }).done(function(data) {
                console.log('data=',data);
                var holidays = data['holidays'];
                console.log('holidays=',holidays);
                if( holidays ) {
                    days = days - holidays;
                }
                console.log('notes=',data['note']);
                if( data['note'] ) {
                    holder.find('.warning-holidays').html(data['note']).show();
                }
                lbtn.stop();
            });

            lbtn.stop();

            return days;
        }
        // Count days from d0 to d1 inclusive, excluding Fridays and Saturdays
        function calculateSimpleWorkingDays( startDateOrig, endDateOrig )  {
            const startDate = new Date(startDateOrig);
            const endDate = new Date(endDateOrig);
            //return 0;//testing
            var days = 0;
            for( var i = startDate; i <= endDate; i.setDate(i.getDate() + 1) ) {
                if( i.getDay() != 6 && i.getDay() != 0 ) {
                    days = days + 1;
                }
            }
            return days;
        }

        function formatDateToStringYMD(date) {
            var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear();

            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;

            return [year, month, day].join('-');
        }

        function getNextWorkingDay( endDate )  {
            //return endDate;//testing
            //get endDate - the latest date from business and vacation request
            var endDate = null;
            $('.vacreq-endDate').each( function(){
                //var thisDate = $(this).datepicker('getDate'); //this cause problem async between datepicker field and calendar icon
                var thisDate = $(this).val();
                //console.log('1thisDate='+thisDate);
                if( thisDate ) {
                    thisDate = new Date(thisDate);
                    //console.log('2thisDate=' + thisDate);
                    if( endDate == null || thisDate > endDate ) {
                        endDate = thisDate;
                    }
                }
            });

            if( endDate == null ) {
                //console.log('NULL endDate='+endDate);
                return null;
            }

            //var endDate = new Date(endDate);

            //console.log('endDate='+endDate);
            //return endDate;//testing

            var finishDate = new Date(endDate);
            finishDate.setDate(endDate.getDate()+7);
            //console.log('finishDate='+finishDate+", day="+finishDate.getDay());

            var nextWorkingDay = new Date(endDate);    //new Date();
            nextWorkingDay.setDate(endDate.getDate()+1);
            //console.log('nextWorkingDay='+nextWorkingDay+", day="+nextWorkingDay.getDay());

            for( nextWorkingDay; nextWorkingDay <= finishDate; nextWorkingDay.setDate(nextWorkingDay.getDate() + 1) ) {
                //console.log('nextWorkingDay='+nextWorkingDay+", day="+nextWorkingDay.getDay());
                if( nextWorkingDay.getDay() != 6 && nextWorkingDay.getDay() != 0 ) {
                    return nextWorkingDay;
                }
            }

            //console.log('EOF NULL');
            return null;
        }

        function validateVacReqForm(btn) {
            //console.log("_requestType="+_requestType);
            if( _requestType == "business-vacation" ) {
                validateVacReqBusinessVacationForm(btn);
            }
            if( _requestType == "carryover" ) {
                validateVacReqCarryOverForm(btn);
            }
        }
        function validateVacReqCarryOverForm(btn) {

            var lbtn = Ladda.create(btn);
            lbtn.start();

            $('#error-box').hide();

            //remove alert-danger from input fields
            $('input').removeClass('alert-danger');

            var error = null;

            var personAwayData = $('.vacreq-person-away').select2('data');
            if( !error && !personAwayData ) {
                error = "Please choose a person away";
            }

            //var userInstitution = $('.vacreq-institution').select2('data');
            //For carry over request, only vacreq-tentativeInstitution is required
            var userInstitution = $('.vacreq-tentativeInstitution').select2('data');
            if (!error && !userInstitution) {
                error = "Please select the organizational group";
            }

            var carryOverDays = $('.vacreq-carryOverDays').val();
            if (!error && !carryOverDays) {
                error = "Please enter the number of days to carry over";
                $('.vacreq-carryOverDays').addClass('alert-danger');
            }

            //Should we have this only for "new" request?
            var admin = $('#vacreq_admin').val();
            //console.log('admin='+admin);
            if( admin != 'admin' ) {
                var maxCarryOverVacationDays = $('#maxcarryovervacationdays').val();
                //console.log('['+carryOverDays+']?=['+maxCarryOverVacationDays+']');
                if (carryOverDays && maxCarryOverVacationDays) {
                    carryOverDays = parseInt(carryOverDays);
                    maxCarryOverVacationDays = parseInt(maxCarryOverVacationDays);
                    //console.log('['+carryOverDays+']?=['+maxCarryOverVacationDays+']');
                    //alert('['+carryOverDays+']?=['+maxCarryOverVacationDays+']');
                    if (carryOverDays > maxCarryOverVacationDays) {
                        error = "As per policy, the number of days that can be carried over to the following year is limited to the maximum of " + maxCarryOverVacationDays;
                        $('.vacreq-carryOverDays').addClass('alert-danger');
                        //console.log('NOTOK='+error);
                    } else {
                        //console.log('OK');
                        //return;
                    }
                }
            }

            //var totalAccruedDays = $('#totalAccruedDays').val();
            var remainingDays = $('#remainingDays').val();
            if( carryOverDays && remainingDays ) {
                if( Number(carryOverDays) > Number(remainingDays) ) {
                    var siteEmail = $('#siteEmail').val();
                    var lessDays = Number(carryOverDays) - Number(remainingDays);
                    var warningMsg = "You are about to request "+carryOverDays+
                    " days to be carried over to the following year. "+
                    "According to system records you have "+remainingDays+" remaining vacation days ("+
                        lessDays+" less). "+
                    "If you require a correction, please contact the system administrator by e-mail "+
                    "at "+siteEmail+" before submitting. "+
                    "Are you sure you would like to submit this request?";
                    //$('.vacreq-carryOverDays').addClass('alert-danger');

                    var warningConfirm = confirm(warningMsg);
                    if( warningConfirm == true ) {
                        //"You pressed OK!";
                    } else {
                        //$('#error-box').html(warningMsg);
                        //$('#error-box').show();
                        lbtn.stop();
                        return false;
                    }
                }
            }

            var sourceYear = $('.vacreq-sourceYear').select2('val');
            var destinationYear = $('.vacreq-destinationYear').select2('val');
            console.log('sourceYear='+sourceYear+', destinationYear='+destinationYear);
            if( sourceYear == destinationYear ) {
                error = "Please select two consecutive academic years as source and destination.";
            }

            if( error ) {
                $('#error-box').html(error);
                $('#error-box').show();
                lbtn.stop();
                return false;
            }

            $('#vacreq-request-form').submit();
        }
        function validateVacReqBusinessVacationForm(btn) {

            var lbtn = Ladda.create(btn);
            lbtn.start();

            $('#error-box').hide();

            //remove alert-danger from input fields
            $('input').removeClass('alert-danger');

            var error = null;
            var requestB = false;
            var requestV = false;

            var userData = $('.vacreq-user').select2('data');
            if( !error && !userData ) {
                error = "Please choose a requester";
            }

            var personAwayData = $('.vacreq-person-away').select2('data');
            if( !error && !personAwayData ) {
                error = "Please choose a person away";
            }

            var userInstitution = $('.vacreq-institution').select2('data');
            if( !error && !userInstitution ) {
                error = "Please select the organizational group";
            }

            var approverData = $('.vacreq-approver').select2('data');
            if( !error && !approverData ) {
                error = "Please choose an approver";
            }

            var businessRequest = $('#vacreq-Business');
            var vacationRequest = $('#vacreq-Vacation');

            var startDateBusiness = businessRequest.find('.vacreq-startDate').val();
            var endDateBusiness = businessRequest.find('.vacreq-endDate').val();
            //console.log('startDateBusiness=('+startDateBusiness+')' + 'endDateBusiness=('+endDateBusiness+')');

            var startDateVacation = vacationRequest.find('.vacreq-startDate').val();
            var endDateVacation = vacationRequest.find('.vacreq-endDate').val();
            //console.log('startDateVacation=('+startDateVacation+')' + 'endDateVacation=('+endDateVacation+')');

            if( !error && !startDateBusiness && !startDateVacation ) {
                error = "Please fill in the First Day Away";
            }

            //console.log('endDate=('+endDate+')');
            if( !error && !endDateBusiness && !endDateVacation ) {
                error = "Please fill in the Last Day Away";
            }

            //Business
            if( !error && startDateBusiness && endDateBusiness ) {
                requestB = true;
                var numberOfDays = businessRequest.find('.vacreq-numberOfDays').val();
                if( !error && !numberOfDays ) {
                    error = "Please enter the number of work days off-site";
                    businessRequest.find('.vacreq-numberOfDays').addClass('alert-danger');
                }

                var expenses = businessRequest.find('.vacreq-expenses').val();
                if( !error && !expenses ) {
                    error = "Please fill in the estimated expenses";
                    businessRequest.find('.vacreq-expenses').addClass('alert-danger');
                }

                var description = businessRequest.find('.vacreq-description').val();
                if( !error && !description ) {
                    error = "Please fill in the description";
                    businessRequest.find('.vacreq-description').addClass('alert-danger');
                }

            }

            //Vacation
            if( !error && startDateVacation && endDateVacation ) {
                requestV = true;
                var numberOfDays = vacationRequest.find('.vacreq-numberOfDays').val();
                if( !error && !numberOfDays ) {
                    error = "Please enter the number of work days off-site";
                    vacationRequest.find('.vacreq-numberOfDays').addClass('alert-danger');
                }

            }

            var firstDayBackInOffice = $('.vacreq-firstDayBackInOffice').val();
            if( !error && !firstDayBackInOffice ) {
                error = "Please fill in the first day back in office";
                vacationRequest.find('.vacreq-firstDayBackInOffice').addClass('alert-danger');
            }

            //check for dates overlaps
            if( requestB && requestV ) {
                //(StartDate1 <= EndDate2) and (StartDate2 <= EndDate1)
                if( startDateBusiness <= endDateVacation && startDateVacation <= endDateBusiness ) {
                    error = "It appears your Business Travel dates and Vacation dates overlap. " +
                            "Please correct the dates prior to submission. " +
                            "If you would like to take some vacation days before your business travel dates " +
                            "and some after your business travel dates, please submit two separate requests: " +
                            "one request for business travel and vacation days after business travel, " +
                            "as well as a separate second request for vacation days before your business travel dates.";
                }
            }

            //console.log('error='+error);

            if( error ) {
                $('#error-box').html(error);
                $('#error-box').show();
                lbtn.stop();
                return false;
            }

            $('#vacreq-request-form').submit();
        }

        function vacreqSetDefaultInformUsersListener() {

            console.log("_requestType="+_requestType);
            //vacreq-tentativeInstitution
            //var instSelector = '.vacreq-institution';
            //if( _requestType == "business-vacation" ) {
            //}
//            if( _requestType == "carryover" ) {
//                instSelector = '.vacreq-tentativeInstitution';
//            }

            var instSelector = '.vacreq-institution';
            if( _requestType == "carryover" ) {
                instSelector = '.vacreq-tentativeInstitution';
            }

            $(instSelector).on("change", function(e) {
                console.log('vacreqSetDefaultInformUsersListener');
                vacreqSetPersonAway();
                vacreqSetDefaultInformUsers();
                //recalculate holidays with selected institution
                //$('.calculate-btn').click();
            });
        }
        function vacreqSetDefaultInformUsers() {

            var instSelector = '.vacreq-institution';
            if( _requestType == "carryover" ) {
                instSelector = '.vacreq-tentativeInstitution';
            }

            var holder = $('#vacreq-request-form');
            var userInstitution = holder.find(instSelector).select2('data');
            var instid = 0;
            if( userInstitution ) {
                instid = userInstitution.id;
            }
            if( typeof instid === 'undefined' ) {
                instid = 0;
            }
            console.log('vacreq_orginst_defaultinformusers_ajax instid='+instid);

            //update #vacreq-defaultInformUsers
            var updateUserUrl = Routing.generate('vacreq_orginst_defaultinformusers_ajax', {instid:instid});
            //console.log('updateUserUrl='+updateUserUrl);
            $.get(updateUserUrl, function(data, status){
                //console.log('data='+data+", status="+status);
                $('#vacreq-defaultInformUsers').val(data);
                if( data ) {
                    $('#vacreq-holder-defaultInformUsers').show();
                } else {
                    $('#vacreq-holder-defaultInformUsers').hide();
                }
            });
        }
        function vacreqSetPersonAway() {
            var holder = $('#vacreq-request-form');

            if( $('#s2id_oleg_vacreqbundle_request_user').hasClass('select2-container-disabled') ) {
                //console.log("vacreq-person-away is disabled");
                return;
            } else {
                //console.log("vacreq-person-away is enabled");
            }

            //if( _requestType == "carryover" ) {
            //    return;
            //}

            //record original person away
            var personAwayId = 0;
            var personAway = $("select.vacreq-person-away").select2('data');
            if( personAway ) {
                personAwayId = personAway.id;
            }

            var instSelector = '.vacreq-institution';
            if( _requestType == "carryover" ) {
                instSelector = '.vacreq-tentativeInstitution';
            }

            var userInstitution = holder.find(instSelector).select2('data');

            var instid = 0;
            if( userInstitution ) {
                instid = userInstitution.id;
            }
            if( typeof instid === 'undefined' ) {
                instid = 0;
            }
            //console.log('vacreqSetPersonAway instid='+instid);

            //update #vacreq-defaultInformUsers
            var url = Routing.generate('vacreq_orginst_personaway_ajax', {instid:instid});
            //console.log('url='+url);

//                $.get(url, function(data, status){
//                    //console.log('data=',data,", status="+status);
//                    console.log('data=',data,", status="+status);
//                    var newOption = new Option(thisUserText, thisUserId, false, false);
//                    $("select.vacreq-person-away").append(newOption).trigger('change');
//                });

            $.ajax({
                url: url,
                timeout: _ajaxTimeout,
                async: asyncflag,
                data: {instid: instid},
            }).done(function(data) {
                //console.log('vacreqSetPersonAway reset person away');
                $('select.vacreq-person-away').empty().trigger("change");
                vacreqUpdatePersonAway(data,personAwayId);
            });
        }
        function vacreqUpdatePersonAway(users,personAwayId) {
            users.forEach(function(item){
                var thisUserId = item['id'];
                var thisUserText = item['text'];
                if( thisUserText ) {
                    var newOption = new Option(thisUserText, thisUserId, false, false);
                    $("select.vacreq-person-away").append(newOption).trigger('change');
                }
            });
            //$("select.vacreq-person-away").select2('val',null);
            if( personAwayId ) {
                //console.log('vacreqSetPersonAway set user personAwayId='+personAwayId);
                $("select.vacreq-person-away").select2('val',personAwayId);
            } else {
                var userid = $('#authuser_id').val();
                if (userid && userid.length > 0) {
                    //console.log('vacreqSetPersonAway set user userid=' + userid);
                    $("select.vacreq-person-away").select2('val', userid);
                }
            }
        }

    </script>
{% endblock %}


{#Snapshot css#}
{% block additionalcss %}
    {#{% stylesheets#}
        {#'orderassets/appuserdirectory/form/css/steve-snapshot.css' filter='cssrewrite'#}
    {#%}#}
    {#<link rel="stylesheet" href="{{ asset_url }}" />#}
    {#{% endstylesheets %}#}

    <link rel="stylesheet" type="text/css" href="{{ asset('orderassets/AppUserdirectoryBundle/form/css/steve-snapshot.css') }}" />

{% endblock %}
